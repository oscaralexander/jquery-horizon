const pluginName='horizon';class Horizon{constructor(a,b){this.options=$.extend({},this.defaults,b),this.$el=$(a),this.init()}init(){window.horizon=window.horizon||{},window.horizon.scrollY=window.horizon.scrollY||0,window.horizon.targets=window.horizon.targets||[],'IntersectionObserver'in window?'function'!=typeof window.horizon.io&&(window.horizon.io=new IntersectionObserver(a=>{a.forEach(a=>{$(a.target)[a.isIntersecting?'addClass':'removeClass'](this.options.classNameIsInView)})})):this.$el.addClass(this.options.classNameIsInView),window.horizon.targets.push({$el:this.$el,height:this.$el.height(),top:this.$el.offset().top}),window.horizon.io.observe(this.$el.get(0)),this.$el.addClass(this.options.classNameIsInView),window.requestAnimationFrame(this.onRequestAnimationFrame.bind(this)),$(window).on('load orientationchange resize',()=>this.update())}onRequestAnimationFrame(){const a=window.scrollY;let b;window.horizon.scrollY!==a&&(window.horizon.targets.forEach(a=>{a.$el.hasClass(this.options.classNameIsInView)&&(b=(window.scrollY+window.innerHeight-a.top)/(window.innerHeight+a.height),0<=b&&1>=b&&(b=2*b-1,a.$el.trigger(this.options.eventNameScroll,[b])))}),window.horizon.scrollY=window.scrollY),window.requestAnimationFrame(this.onRequestAnimationFrame.bind(this))}update(){let a;for(let b=0;b<window.horizon.targets.length;b++)a=window.horizon.targets[b].$el,window.horizon.targets[b].height=a.height(),window.horizon.targets[b].top=a.offset().top}}Horizon.prototype.defaults={classNameIsInView:'is-inView',eventNameScroll:'horizon:scroll'},$.fn.horizon=function(a){return this.each((b,c)=>{const d=$(c).data(`plugin_${pluginName}`)||null;d?'string'==typeof a&&d[a]():$(c).data(`plugin_${pluginName}`,new Horizon(c,a))})};
